)
# Run evolution with our custom progress function
result <- run_psge(psge_instance, verbose = TRUE,
progress_fn = custom_progress)
load_all()
# Set up PSGE with verbose output
psge_instance <- setup_psge(
grammar_path = "regression.bnf",
fitness_fn = fitness_function,
pop_size = 100,
generations = 50,
crossover_rate = 0.9,
mutation_rate = 0.1,
max_depth = 10,
learning_rate = 0.01,
tournament_size = 3,
elitism = 5,
adaptive_learning = TRUE,
seed = 42
)
# Run evolution with our custom progress function
result <- run_psge(psge_instance, verbose = TRUE,
progress_fn = custom_progress)
# Final evaluation
cat("\n=== Final Result ===\n")
cat("Best solution found:", result$phenotype, "\n")
cat("Final fitness:", result$fitness, "\n")
# Plot final result
f <- function(x) {}
body(f) <- parse(text = result$phenotype)
plot(training_data$x, training_data$y, type = "p",
col = "blue", main = "Final Solution")
curve(f, add = TRUE, col = "red")
legend("topleft", c("Target", "Evolved"),
col = c("blue", "red"), lty = c(NA, 1), pch = c(1, NA))
# Calculate R-squared for final solution
predictions <- sapply(training_data$x, f)
r_squared <- 1 - sum((training_data$y - predictions)^2) /
sum((training_data$y - mean(training_data$y))^2)
cat("R-squared:", r_squared, "\n")
load_all()
# Create synthetic data from the function f(x) = x^2 + 2x + 1
generate_data <- function(n = 100) {
x <- seq(-10, 10, length.out = n)
y <- x^2 + 2*x + 1
data.frame(x = x, y = y)
}
# Generate our training data
set.seed(42)
training_data <- generate_data()
# Define our fitness function that calculates mean squared error
fitness_function <- function(phenotype) {
# The phenotype will be a string containing R code
# We need to create a function from it
tryCatch({
# Create function from phenotype
f <- function(x) {}
body(f) <- parse(text = phenotype)
# Calculate predictions
predicted <- sapply(training_data$x, f)
# Calculate MSE
mse <- mean((predicted - training_data$y)^2)
return(mse)
}, error = function(e) {
# Return large error for invalid expressions
return(1e6)
})
}
# Create our grammar file
grammar_text <- "
<expr> ::= <expr><op><expr> | <coef>*x | <coef>
<op> ::= + | - | * | /
<coef> ::= 1 | 2 | 3 | 4 | 5 | -1 | -2 | -3 | -4 | -5
"
# Write grammar to file
writeLines(grammar_text, "regression.bnf")
# Set up PSGE with verbose output
psge_instance <- setup_psge(
grammar_path = "regression.bnf",
fitness_fn = fitness_function,
pop_size = 100,
generations = 50,
crossover_rate = 0.9,
mutation_rate = 0.1,
max_depth = 10,
learning_rate = 0.01,
tournament_size = 3,
elitism = 5,
adaptive_learning = TRUE,
seed = 42
)
# Create a custom progress function for detailed output
custom_progress <- function(generation, population, best_individual) {
cat("\n=== Generation", generation, "===\n")
cat("Best individual phenotype:", best_individual$phenotype, "\n")
cat("Best fitness:", best_individual$fitness, "\n")
# Print PCFG probabilities
cat("\nPCFG Probabilities:\n")
print(psge_instance$grammar$get_pcfg())
# Print population statistics
fitnesses <- sapply(population, function(x) x$fitness)
cat("\nPopulation Statistics:\n")
cat("Mean fitness:", mean(fitnesses), "\n")
cat("Std dev fitness:", sd(fitnesses), "\n")
cat("Best fitness:", min(fitnesses), "\n")
cat("Worst fitness:", max(fitnesses), "\n")
# Plot current best solution
if (generation %% 10 == 0) {
f <- function(x) {}
body(f) <- parse(text = best_individual$phenotype)
plot(training_data$x, training_data$y, type = "p",
col = "blue", main = paste("Generation", generation))
curve(f, add = TRUE, col = "red")
legend("topleft", c("Target", "Evolved"),
col = c("blue", "red"), lty = c(NA, 1), pch = c(1, NA))
}
cat("\n")
}
# Run evolution with our custom progress function
result <- run_psge(psge_instance, verbose = TRUE,
progress_fn = custom_progress)
# Final evaluation
cat("\n=== Final Result ===\n")
cat("Best solution found:", result$phenotype, "\n")
cat("Final fitness:", result$fitness, "\n")
# Plot final result
f <- function(x) {}
body(f) <- parse(text = result$phenotype)
plot(training_data$x, training_data$y, type = "p",
col = "blue", main = "Final Solution")
curve(f, add = TRUE, col = "red")
legend("topleft", c("Target", "Evolved"),
col = c("blue", "red"), lty = c(NA, 1), pch = c(1, NA))
# Calculate R-squared for final solution
predictions <- sapply(training_data$x, f)
r_squared <- 1 - sum((training_data$y - predictions)^2) /
sum((training_data$y - mean(training_data$y))^2)
cat("R-squared:", r_squared, "\n")
styler:::style_active_file()
load_all()
# Set up PSGE with verbose output
psge_instance <- setup_psge(
grammar_path = "regression.bnf",
fitness_fn = fitness_function,
pop_size = 100,
generations = 50,
crossover_rate = 0.9,
mutation_rate = 0.1,
max_depth = 10,
learning_rate = 0.01,
tournament_size = 3,
elitism = 5,
adaptive_learning = TRUE,
seed = 42
)
# Create a custom progress function for detailed output
custom_progress <- function(generation, population, best_individual) {
cat("\n=== Generation", generation, "===\n")
cat("Best individual phenotype:", best_individual$phenotype, "\n")
cat("Best fitness:", best_individual$fitness, "\n")
# Print PCFG probabilities
cat("\nPCFG Probabilities:\n")
print(psge_instance$grammar$get_pcfg())
# Print population statistics
fitnesses <- sapply(population, function(x) x$fitness)
cat("\nPopulation Statistics:\n")
cat("Mean fitness:", mean(fitnesses), "\n")
cat("Std dev fitness:", sd(fitnesses), "\n")
cat("Best fitness:", min(fitnesses), "\n")
cat("Worst fitness:", max(fitnesses), "\n")
# Plot current best solution
if (generation %% 10 == 0) {
f <- function(x) {}
body(f) <- parse(text = best_individual$phenotype)
plot(training_data$x, training_data$y, type = "p",
col = "blue", main = paste("Generation", generation))
curve(f, add = TRUE, col = "red")
legend("topleft", c("Target", "Evolved"),
col = c("blue", "red"), lty = c(NA, 1), pch = c(1, NA))
}
cat("\n")
}
# Run evolution with our custom progress function
result <- run_psge(psge_instance, verbose = TRUE,
progress_fn = custom_progress)
# Run evolution with our custom progress function
result <- run_psge(psge_instance, verbose = TRUE,
progress_fn = custom_progress)
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
warnings()
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
Best solution found:
Best solution found:
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
warning()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
warnings()
load_all()
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
warnings()
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
styler:::style_active_file()
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
?set.seed()
date()
as.POSIXct( Sys.time() )
as.POSIXct( Sys.time() ) |> as.integer()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
load_all()
load_all()
source("~/Documents/R_Packages/Rpsge/docs/example_04.R")
library(Rpsge)
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
rm(list = ls())
source("docs/example_04.R")
psge_instance
load_all()
psge_instance
source("docs/example_04.R")
psge_instance
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
warnings()
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
load_all()
source("docs/example_04.R")
