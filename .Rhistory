use_test("grammar")
load_all()
document()
document()
load_all()
library(testthat)
# Helper function to create temporary grammar files for testing
create_test_grammar_file <- function(content, filename = "test_grammar.bnf") {
writeLines(content, filename)
return(filename)
}
load_all()
document()
document()
styler:::style_selection()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
use_test("mapping")
document()
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
tinytex::tlmgr_install(pkgs = "algorithm2e")
use_test(name = "evolution")
load_all()
load_all()
load_all()
load_all()
load_all()
if (length(individual$genotype) == 0) {
stop("Invalid individual: empty genotype")
}
rm(list = ls())
document()
load_all()
document()
load_all()
# Create test grammar
grammar <- create_uniform_grammar()
#' Create a grammar with uniform probabilities for testing
#' @return A grammar with uniform probabilities
create_uniform_grammar <- function() {
grammar <- list(
non_terminals = c("expr", "op", "var"),
terminals = c("+", "-", "*", "/", "x", "y", "1.0"),
start_symbol = "expr",
rules = list(
expr = list(
list(symbols = c("expr", "op", "expr"), types = c("NT", "NT", "NT"), prob = 0.5),
list(symbols = "var", types = "NT", prob = 0.5)
),
op = list(
list(symbols = "+", types = "T", prob = 0.25),
list(symbols = "-", types = "T", prob = 0.25),
list(symbols = "*", types = "T", prob = 0.25),
list(symbols = "/", types = "T", prob = 0.25)
),
var = list(
list(symbols = "x", types = "T", prob = 1/3),
list(symbols = "y", types = "T", prob = 1/3),
list(symbols = "1.0", types = "T", prob = 1/3)
)
)
)
return(grammar)
}
# Create test grammar
grammar <- create_uniform_grammar()
print_grammar(grammar)
result <- traceRecursiveMappingWithCodon(
grammar,
c(0.1, 0.6),
c(0.1),
c(0.1)
)
result <- traceRecursiveMappingWithCodon(
grammar,
c(0.1, 0.6),
c(0.1),
c(0.1)
)
load_all()
result <- traceRecursiveMappingWithCodon(
grammar,
c(0.1, 0.6),
c(0.1),
c(0.1)
)
load_all()
result <- traceRecursiveMappingWithCodon(
grammar,
c(0.1, 0.6),
c(0.1),
c(0.1)
)
source("~/Documents/R_Packages/Rpsge/tests/testthat.R")
install.packages("doRNG", dependencies = TRUE)
install.packages("doRNG", dependencies = TRUE)
install.packages("doMPI", dependencies = TRUE)
install.packages("doMPI", dependencies = TRUE)
install.packages("doRNG", dependencies = TRUE)
install.packages("Rmpi", dependencies = TRUE)
install.packages("Rmpi", dependencies = TRUE)
install.packages("doRNG", dependencies = TRUE)
?doRNG::`%dorng%`()
document()
document()
?use_vignette()
use_vignette(name = "intro", title = "Getting Started with Rpsge")
citation()
citation(package = "Rpsge")
help(package="Rpgse")
help(package="Rpsge")
help(package="Rpsge")
vignette(package = "Rpsge")
source("~/.active-rstudio-document")
