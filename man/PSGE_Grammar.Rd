% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grammar.R
\name{PSGE_Grammar}
\alias{PSGE_Grammar}
\title{PSGE Grammar Class}
\description{
A class that implements the grammar component of Probabilistic Structured Grammatical Evolution.
This class handles grammar parsing, validation, and mapping operations.
}
\details{
The PSGE_Grammar class maintains the grammar structure, including non-terminals,
terminals, production rules, and their associated probabilities. It provides methods
for parsing grammar files, creating individuals, and mapping genotypes to phenotypes.
}
\examples{

## ------------------------------------------------
## Method `PSGE_Grammar$mapping`
## ------------------------------------------------

\dontrun{
# Create a grammar instance
grammar <- PSGE_Grammar$new("path/to/grammar.bnf")

# Generate a random individual
individual <- grammar$generate_random_individual()

# Map genotype to phenotype
result <- grammar$mapping(individual$genotype)
phenotype <- result[[1]]
max_depth <- result[[2]]
}

}
\seealso{
\code{\link{recursive_mapping}} for the underlying recursive implementation
\code{\link{mapping_rcpp}} for the C++ optimized version
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{grammar_file}}{Character string containing the path to the grammar file}

\item{\code{grammar}}{List containing the parsed grammar rules}

\item{\code{non_terminals}}{Character vector of non-terminal symbols}

\item{\code{terminals}}{Character vector of terminal symbols}

\item{\code{start_rule}}{Character string specifying the starting non-terminal}

\item{\code{max_depth}}{Integer specifying maximum derivation depth}

\item{\code{max_init_depth}}{Integer specifying maximum initialization depth}

\item{\code{pcfg}}{Matrix containing probabilistic context-free grammar weights}

\item{\code{pcfg_mask}}{Logical matrix indicating valid rules}

\item{\code{index_of_non_terminal}}{List mapping non-terminals to indices}

\item{\code{shortest_path}}{List containing minimum derivation paths}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PSGE_Grammar-new}{\code{PSGE_Grammar$new()}}
\item \href{#method-PSGE_Grammar-read_grammar}{\code{PSGE_Grammar$read_grammar()}}
\item \href{#method-PSGE_Grammar-generate_uniform_pcfg}{\code{PSGE_Grammar$generate_uniform_pcfg()}}
\item \href{#method-PSGE_Grammar-find_shortest_path}{\code{PSGE_Grammar$find_shortest_path()}}
\item \href{#method-PSGE_Grammar-minimum_path_calc}{\code{PSGE_Grammar$minimum_path_calc()}}
\item \href{#method-PSGE_Grammar-recursive_individual_creation}{\code{PSGE_Grammar$recursive_individual_creation()}}
\item \href{#method-PSGE_Grammar-mapping}{\code{PSGE_Grammar$mapping()}}
\item \href{#method-PSGE_Grammar-recursive_mapping}{\code{PSGE_Grammar$recursive_mapping()}}
\item \href{#method-PSGE_Grammar-prepare_for_rcpp}{\code{PSGE_Grammar$prepare_for_rcpp()}}
\item \href{#method-PSGE_Grammar-mapping_rcpp}{\code{PSGE_Grammar$mapping_rcpp()}}
\item \href{#method-PSGE_Grammar-clone}{\code{PSGE_Grammar$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-new"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-new}{}}}
\subsection{Method \code{new()}}{
Creates a new PSGE grammar instance from a grammar file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$new(grammar_path, max_depth = 17, max_init_depth = 6)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{grammar_path}}{Character string specifying path to grammar file}

\item{\code{max_depth}}{Integer maximum derivation depth (default: 17)}

\item{\code{max_init_depth}}{Integer maximum initialization depth (default: 6)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new PSGE_Grammar instance
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-read_grammar"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-read_grammar}{}}}
\subsection{Method \code{read_grammar()}}{
Parses a grammar file and initializes internal grammar structures.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$read_grammar()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Reads a BNF-style grammar file, extracts rules, identifies terminals and
non-terminals, and initializes the PCFG with uniform probabilities.
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-generate_uniform_pcfg"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-generate_uniform_pcfg}{}}}
\subsection{Method \code{generate_uniform_pcfg()}}{
Initializes the Probabilistic Context-Free Grammar with uniform probabilities.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$generate_uniform_pcfg()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Creates probability matrices where each production rule for a given non-terminal
has equal probability of being selected.
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-find_shortest_path"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-find_shortest_path}{}}}
\subsection{Method \code{find_shortest_path()}}{
Calculates the minimum number of derivation steps needed to reach terminal
symbols from each non-terminal in the grammar.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$find_shortest_path()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This analysis is crucial for:
\enumerate{
\item Preventing infinite recursion
\item Guiding derivation choices near depth limits
\item Ensuring valid solutions can be reached
}
}

\subsection{Returns}{
None (updates shortest_path field)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-minimum_path_calc"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-minimum_path_calc}{}}}
\subsection{Method \code{minimum_path_calc()}}{
Recursively calculates the minimum number of steps needed to derive
terminal symbols from a given symbol.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$minimum_path_calc(current_nt, visited)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{current_symbol}}{List containing symbol type and value}

\item{\code{open_symbols}}{List of symbols in current derivation path}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Integer representing minimum derivation steps needed
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-recursive_individual_creation"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-recursive_individual_creation}{}}}
\subsection{Method \code{recursive_individual_creation()}}{
Creates a new individual by recursively expanding non-terminals using
PSGE's probabilistic rule selection mechanism.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$recursive_individual_creation(genome, symbol, current_depth)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{genome}}{Current genome structure being built}

\item{\code{symbol}}{Current symbol being expanded}

\item{\code{current_depth}}{Current derivation depth}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Maximum depth reached during individual creation
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-mapping"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-mapping}{}}}
\subsection{Method \code{mapping()}}{
Converts a PSGE genotype to its corresponding phenotype using probabilistic mapping
according to the grammar rules and PCFG probabilities. This function implements
the core mapping process described in the PSGE paper.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$mapping(mapping_rules, positions_to_map = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mapping_rules}}{List of lists, where each sublist corresponds to a non-terminal
and contains triplets of (rule_index, probability, depth) for each expansion}

\item{\code{positions_to_map}}{Optional integer vector indicating current position in mapping_rules
for each non-terminal. If NULL, starts mapping from beginning (all zeros)}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The mapping process follows these steps:
\enumerate{
\item Starts from the grammar's start symbol
\item Recursively expands non-terminals using probabilistic rule selection
\item Either uses existing mapping rules from the genotype or generates new ones as needed
\item Enforces maximum depth constraints to prevent infinite recursion
\item Concatenates terminal symbols to produce the final phenotype
}
}

\subsection{Returns}{
A list containing two elements:
\describe{
\item{[\link{1}]}{Character string containing the mapped phenotype}
\item{[\link{2}]}{Integer indicating the maximum depth reached during mapping}
}

Will throw an error in the following cases:
\describe{
\item{runtime_error}{If maximum depth is exceeded during mapping}
\item{runtime_error}{If invalid rule references are encountered}
\item{runtime_error}{If probability distributions are invalid}
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# Create a grammar instance
grammar <- PSGE_Grammar$new("path/to/grammar.bnf")

# Generate a random individual
individual <- grammar$generate_random_individual()

# Map genotype to phenotype
result <- grammar$mapping(individual$genotype)
phenotype <- result[[1]]
max_depth <- result[[2]]
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-recursive_mapping"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-recursive_mapping}{}}}
\subsection{Method \code{recursive_mapping()}}{
Implements PSGE's core mapping process, converting genotype to phenotype
through recursive probabilistic expansion.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$recursive_mapping(
  mapping_rules,
  positions_to_map,
  current_sym,
  current_depth,
  output
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mapping_rules}}{Current mapping rules}

\item{\code{positions_to_map}}{Current positions in mapping}

\item{\code{current_sym}}{Current symbol being processed}

\item{\code{current_depth}}{Current derivation depth}

\item{\code{output}}{Output being constructed}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Maximum depth reached during mapping
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-prepare_for_rcpp"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-prepare_for_rcpp}{}}}
\subsection{Method \code{prepare_for_rcpp()}}{
Converts the grammar structure into a format optimized for C++ processing,
ensuring efficient mapping operations.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$prepare_for_rcpp()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Performs the following conversions:
\enumerate{
\item Creates zero-based indexing for non-terminals
\item Restructures grammar rules for C++ accessibility
\item Adds necessary metadata for C++ processing
}
}

\subsection{Returns}{
List containing C++-ready grammar structures
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-mapping_rcpp"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-mapping_rcpp}{}}}
\subsection{Method \code{mapping_rcpp()}}{
Provides a high-performance mapping implementation using C++, maintaining
identical behaviour to the R implementation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$mapping_rcpp(mapping_rules, positions_to_map = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mapping_rules}}{Current mapping rules}

\item{\code{positions_to_map}}{Optional mapping positions}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing mapped phenotype and maximum depth reached
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PSGE_Grammar-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PSGE_Grammar-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PSGE_Grammar$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
